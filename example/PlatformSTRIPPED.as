package {	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;		[SWF(width='500', height='400', frameRate='40', backgroundColor='0xffffff')]	public class Platform extends Sprite	{		private var over:String = "";		private var bonus_speed:Number = 0;		private var press_left:Boolean = false;		private var press_right:Boolean = false;		private var press_up:Boolean = false;		private var press_down:Boolean = false;		private var press_space:Boolean = false;		private var x_pos:Number = 0;		private var y_pos:Number = 0;		private var tile_size:Number = 20;		private var ground_acceleration:Number = 1;		private var ground_friction:Number = 0.8;		private var air_acceleration:Number = 0.5;		private var air_friction:Number = 0.7;		private var ice_acceleration:Number = 0.15;		private var ice_friction:Number = 0.95;		private var treadmill_speed:Number = 2;		private var max_speed:Number = 3;		private var xspeed:Number = 0;		private var yspeed:Number = 0;		private var falling:Boolean = false;		private var gravity:Number = 0.5;		private var jump_speed:Number = 6;		private var climbing:Boolean = false;		private var climb_speed:Number = 0.8;		private var coins:Array = new Array();		private var level:Array = new Array();		private var levelObj:Array = new Array		private var keys:Array = new Array();		private var player:Array = new Array();		private var enemy:Array = new Array();		private var walkable_tiles:Array = new Array(0, 5, 6, 7);		private var h:hero = new hero();		private var level_container:Sprite = new Sprite();				private var bottom:Number;		private var left:Number;		private var right:Number;		private var top:Number;		private var bottom_left:Number;		private var bottom_right:Number;		private var top_left:Number;		private var top_right:Number;				private var climbdir:Number;		private var current_tile:Number;		private var friction:Number;				private var speed:Number;		private var jumping:Boolean;		private var walking:Boolean;		private var prev_bottom:Number;						public function onEnterFrame(event:Event):void		{			ground_under_feet();						walking = false;			climbing = false;			if (press_left) {				xspeed-=speed;				walking = true;			}			if (press_right) {				xspeed += speed;				walking = true;			}			if (press_up) {				get_edges();				if (top_right == 6 || bottom_right == 6 || top_left == 6 || bottom_left == 6) {					jumping = false;					falling = false;					climbing = true;					climbdir = -1;				}			}			if (press_down) {				get_edges();				if (over == "ladder" || top_right == 6 || bottom_right == 6 || top_left == 6 || bottom_left == 6) {					jumping = false;					falling = false;					climbing = true;					climbdir = 1;				}			}			if (press_space) {				get_edges();				if (!falling && !jumping) {					jumping = true;					yspeed = -jump_speed;				}			}			if (!walking) {				xspeed *= friction;				if (Math.abs(xspeed)<0.5) {					xspeed = 0;				}			}			if (xspeed>max_speed) {				xspeed = max_speed;			}			if (xspeed<max_speed*-1) {				xspeed = max_speed*-1;			}			if (falling || jumping) {				yspeed += gravity;			}			if (climbing) {				yspeed = climb_speed*climbdir;			}			if (!falling && !jumping && !climbing) {				yspeed = 0;			}			xspeed += bonus_speed;			check_collisions();			h.x = x_pos;			h.y = y_pos;						level_container.x = -x_pos + 250;			level_container.y = -y_pos + 200;						xspeed -= bonus_speed;							public function ground_under_feet():void		{			bonus_speed = 0;			var left_foot_x:Number = Math.floor((x_pos-6)/tile_size);			var right_foot_x:Number = Math.floor((x_pos+5)/tile_size);			var foot_y:Number = Math.floor((y_pos+9)/tile_size);			var left_foot:Number = level[foot_y][left_foot_x];			var right_foot:Number = level[foot_y][right_foot_x];			if (left_foot != 0) {				current_tile = left_foot;			} else {				current_tile = right_foot;			}			switch (current_tile) {				case 0 :					speed = air_acceleration;					friction = air_friction;					falling = true;					break;				case 1 :					over = "ground";					speed = ground_acceleration;					friction = ground_friction;					break;				case 2 :					over = "ice";					speed = ice_acceleration;					friction = ice_friction;					break;			}		}										public function check_collisions():void		{			y_pos += yspeed;			get_edges();			if (yspeed>0) {				if ((bottom_right != 0 && bottom_right != 6) || (bottom_left != 0 && bottom_left != 6)) {					if (bottom_right != 5 && bottom_left != 5) {						if ((bottom_right == 7 || bottom_left == 7) && (Math.abs(yspeed)>1))						{							// trampoline                    		yspeed *= -1;                    		jumping = true;                    		falling = true;						}else {							y_pos = bottom*tile_size-9;							yspeed = 0;							falling = false;							jumping = false;						}					} else {						if (prev_bottom<bottom) {							y_pos = bottom*tile_size-9;							yspeed = 0;							falling = false;							jumping = false;						}					}				}			}                        			if (yspeed<0) {				if ((top_right != 0 && top_right != 5 && top_right != 6) || (top_left != 0 && top_left != 5 && top_left != 6)) {					y_pos = bottom*tile_size+1+8;					yspeed = 0;					falling = false;					jumping = false;				}			}			x_pos += xspeed;			get_edges();			         			if (xspeed < 0) {				if (!is_walkable(top_left) || !is_walkable(bottom_left)) {					x_pos = (left + 1) * tile_size + 6;					xspeed = 0;				}			}                                               			if (xspeed>0) {				if (!is_walkable(top_right) || !is_walkable(bottom_right)) {					x_pos = right * tile_size - 6;					xspeed = 0;				}			}						prev_bottom = bottom;		}				public function get_edges():void		{			right = Math.floor((x_pos+5)/tile_size);			left = Math.floor((x_pos-6)/tile_size);			bottom = Math.floor((y_pos+8)/tile_size);			top = Math.floor((y_pos-9)/tile_size);			top_right = level[top][right];			top_left = level[top][left];			bottom_left = level[bottom][left];			bottom_right = level[bottom][right];		}				public function place_player():void		{			x_pos = (player[0] * tile_size) + (tile_size / 2);			y_pos = (player[1] * tile_size) + (tile_size / 2 + 1);						h.x = x_pos;			h.y = y_pos;		}				public function is_walkable(tile:int):Boolean {			var walkable:Boolean = false;			for (var i:int = 0; i < walkable_tiles.length; i++)			{				if (tile == walkable_tiles[i])				{					walkable = true;					break;				}			}						return (walkable);		}	}}